{"version":3,"sources":["unitz.min.js"],"names":["global","undefined","isString","x","isObject","isNumber","isNaN","isArray","Array","UnitzClass","className","this","converters","mapping","bases","groups","groupMap","Unitz","classes","classMap","units","regex","epsilon","separator","parse","input","group","exec","whole","denom","decimal","unit","toLowerCase","value","parseInt","parsed","normal","unitClass","convert","convertThis","isOne","singular","plural","to","fraction","largestDenominator","classlessDenominators","converted","denominators","toFraction","parseInput","baseFrom","baseTo","combine","inputA","inputB","splitA","split","splitB","splitBoth","concat","i","length","parsedInput","push","conversions","grp","short","long","Math","abs","distance","floor","denominator","numerator","den","num","round","dis","remainder","string","addClass","prototype","addGroup","relativeValue","relativeTo","mainUnit","baseUnit","addOneBaseConversion","source","target","addBaseConversion","uc"],"mappings":"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","file":"unitz.min.js","sourcesContent":["/* unitz 1.0.0 - A unit parser, converter, & combiner in JS by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n  function isString(x)\n  {\n    return typeof x === 'string';\n  }\n\n  function isObject(x)\n  {\n    return x !== null && typeof x === 'object';\n  }\n\n  function isNumber(x)\n  {\n    return typeof x === 'number' && !isNaN(x);\n  }\n\n  function isArray(x)\n  {\n    return x instanceof Array;\n  }\n\n\nvar Unitz =\n{\n\n  classes: [],\n\n  classMap: {},\n\n  units: {},\n\n  regex: /^\\s*(\\d*)(\\/(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i,\n\n  epsilon: 0.0001,\n\n  separator: ',',\n\n  parse: function(input)\n  {\n    var group = this.regex.exec( input );\n    var whole = group[1];\n    var denom = group[3];\n    var decimal = group[4];\n    var unit = group[5].toLowerCase();\n\n    if ( !whole && !decimal && !unit )\n    {\n      return false;\n    }\n\n    var value = 1;\n\n    if ( whole )\n    {\n      value = parseInt( whole );\n\n      if ( denom )\n      {\n        value /= parseInt( denom );\n      }\n      else if ( decimal )\n      {\n        value += 1.0 / parseInt( decimal );\n      }\n    }\n\n    var parsed = {\n      value: value,\n      unit: unit,\n      normal: input,\n      unitClass: this.units[ unit ],\n      convert: this.convertThis\n    };\n\n    if ( parsed.unitClass )\n    {\n      var group = parsed.unitClass.groupMap[ unit ];\n\n      parsed.normal = this.isOne( value ) ?\n        ( value + ' ' + group.singular ) :\n        ( value + ' ' + group.plural );\n    }\n\n    return parsed;\n  },\n\n  convertThis: function(to, fraction, largestDenominator, classlessDenominators)\n  {\n    var converted = Unitz.convert( this, to );\n\n    if ( converted !== false && fraction )\n    {\n      var denominators = this.unitClass ? this.unitClass.groupMap[ this.unit ].denominators : classlessDenominators;\n\n      if ( isArray( denominators ) )\n      {\n        converted = Unitz.toFraction( converted, denominators, largestDenominator );\n      }\n    }\n\n    return converted;\n  },\n\n  convert: function(input, unit)\n  {\n    var parsed = this.parseInput( input );\n\n    // Not valid input? return false\n    if ( !isObject( parsed ) )\n    {\n      return false;\n    }\n\n    var value = parsed.value;\n    var unitClass = parsed.unitClass;\n\n    // If there was no unit class and no unit provided, return the unitless value.\n    if ( !unitClass && !unit )\n    {\n      return value;\n    }\n\n    // If there was no unit class parsed OR the given unit is not in the same class then return false!\n    if ( !unitClass || !(unit in unitClass.converters) )\n    {\n      return false;\n    }\n\n    // If the parsed unit and requested unit is the same, return the parsed value.\n    if ( unitClass.groupMap[ unit ] === unitClass.groupMap[ parsed.unit ] )\n    {\n      return value;\n    }\n\n    // Convert the parsed value to its base unit\n    value *= unitClass.converters[ parsed.unit ];\n\n    // If they don't have the same bases convert the parsed value\n    var baseFrom = unitClass.bases[ parsed.unit ];\n    var baseTo = unitClass.bases[ unit ];\n\n    if ( baseFrom !== baseTo )\n    {\n      value *= unitClass.mapping[ baseFrom ][ baseTo ];\n    }\n\n    // Divide the value by the desired unit.\n    value /= unitClass.converters[ unit ];\n\n    return value;\n  },\n\n  combine: function(inputA, inputB)\n  {\n    var splitA = isString( inputA ) ? inputA.split( this.separator ) : [ inputA ];\n    var splitB = isString( inputB ) ? inputB.split( this.separator ) : [ inputB ];\n    var splitBoth = splitA.concat( splitB );\n    var parsed = [];\n\n    for (var i = 0; i < splitBoth.length; i++)\n    {\n      var parsedInput = this.parseInput( splitBoth[ i ] );\n\n      if ( parsedInput !== false )\n      {\n        parsed.push( parsedInput );\n      }\n    }\n\n    // TODO\n  },\n\n  parseInput: function(input)\n  {\n    if ( isString( input ) )\n    {\n      return this.parse( input );\n    }\n    if ( isObject( input ) )\n    {\n      return input;\n    }\n    if ( isNumber( input ) )\n    {\n      return {\n        value: input,\n        unit: '',\n        unitClass: null,\n        convert: this.convertThis\n      };\n    }\n\n    return false;\n  },\n\n  conversions: function(input, largestDenominator)\n  {\n    var parsed = this.parseInput( input );\n\n    if ( !isObject( parsed ) || !parsed.unitClass )\n    {\n      return input;\n    }\n\n    var groups = parsed.unitClass.groups;\n    var conversions = parsed.conversions = [];\n\n    for (var i = 0; i < groups.length; i++)\n    {\n      var grp = groups[ i ];\n\n      if ( grp.unit === parsed.unit )\n      {\n        continue;\n      }\n\n      var converted = parsed.convert( grp.unit );\n      var fraction = this.toFraction( converted, grp.denominators, largestDenominator );\n      var isOne = this.isOne( converted );\n\n      conversions.push(\n      {\n        decimal: converted,\n        fraction: fraction,\n        short: grp.unit,\n        long: isOne ? grp.singular : grp.plural,\n        group: grp\n      });\n    }\n\n    return parsed;\n  },\n\n  isOne: function(x)\n  {\n    return Math.abs( x - 1 ) < this.epsilon;\n  },\n\n  toFraction: function(value, denominators, largestDenominator)\n  {\n    var distance = Math.abs( Math.floor( value ) - value );\n    var denominator = 1;\n    var numerator = value;\n\n    for (var i = 0; i < denominators.length && distance > this.epsilon; i++)\n    {\n      var den = denominators[ i ];\n\n      if ( largestDenominator && den > largestDenominator )\n      {\n        break;\n      }\n\n      var num = Math.round( value * den );\n      var dis = Math.abs( Math.floor( num / den ) - value );\n\n      if ( dis - this.epsilon < distance )\n      {\n        denominator = den;\n        numerator = num;\n        distance = dis;\n      }\n    }\n\n    if ( denominator === 1 )\n    {\n      return numerator;\n    }\n\n    var whole = Math.floor( numerator / denominator );\n    var remainder = Math.round( value - whole ) * denominator;\n\n    var fraction = {\n      numerator: numerator,\n      denominator: denominator,\n      remainder: remainder,\n      whole: whole,\n      string: whole === 0 ? (  numerator + '/' + denominator ) : ( whole + ' ' + remainder + '/' + denominator )\n    };\n\n    return fraction;\n  },\n\n  addClass: function(unitClass)\n  {\n    this.classMap[ unitClass.className ] = unitClass;\n    this.classes.push( unitClass );\n\n    for (var unit in unitClass.converters)\n    {\n      this.units[ unit ] = unitClass;\n    }\n  }\n\n};\n\n\nfunction UnitzClass(className)\n{\n  this.className = className;\n  this.converters = {};\n  this.mapping = {};\n  this.bases = {};\n  this.groups = [];\n  this.groupMap = {};\n}\n\nUnitzClass.prototype =\n{\n\n  addGroup: function(relativeValue, relativeTo, units, denominators, singular, plural)\n  {\n    var mainUnit = units[ 0 ];\n    var baseUnit = mainUnit;\n\n    if ( relativeTo )\n    {\n      relativeValue *= this.converters[ relativeTo ];\n\n      baseUnit = this.bases[ relativeTo ];\n    }\n\n    var group = {\n      unit: mainUnit,\n      units: units,\n      singular: singular,\n      plural: plural,\n      denominators: denominators\n    };\n\n    for (var i = 0; i < units.length; i++)\n    {\n      var unit = units[ i ];\n\n      this.converters[ unit ] = relativeValue;\n      this.bases[ unit ] = baseUnit;\n      this.groupMap[ unit ] = group;\n    }\n\n    this.groups.push( group );\n  },\n\n  addOneBaseConversion: function(source, target, value)\n  {\n    if ( !(source in this.mapping) )\n    {\n      this.mapping[ source ] = {};\n    }\n\n    this.mapping[ source ][ target ] = value;\n  },\n\n  addBaseConversion: function(source, target, value)\n  {\n    this.addOneBaseConversion( source, target, value );\n    this.addOneBaseConversion( target, source, 1.0 / value );\n  }\n\n};\n\n\nUnitz.addClass((function generateLengthClass()\n{\n  var uc = new UnitzClass( 'Length' );\n\n  uc.addGroup( 1,     null,   ['in', 'inch', 'inches', '\"'], [2, 3, 4, 8, 16, 32], 'inch', 'inches' );\n  uc.addGroup( 12,    'in',   ['ft', 'foot', 'feet', \"'\"], [2, 3, 4, 12], 'foot', 'feet' );\n  uc.addGroup( 3,     'ft',   ['yd', 'yard', 'yards'], [3], 'yard', 'yards' );\n  uc.addGroup( 5280,  'ft',   ['mi', 'mile', 'miles'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'mile', 'miles' );\n  uc.addGroup( 3,     'mi',   ['league', 'leagues'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'league', 'leagues' );\n\n  uc.addGroup( 1,     null,   ['mm', 'millimeter', 'millimeters'], [10], 'millimeter', 'millimeters' );\n  uc.addGroup( 10,    'mm',   ['cm', 'centimeter', 'centimeters'], [2, 4, 10], 'centimeter', 'centimeters' );\n  uc.addGroup( 10,    'cm',   ['dc', 'decimeter', 'decimeters'], [10], 'decimeter', 'decimeters' );\n  uc.addGroup( 100,   'cm',   ['m', 'meter', 'meters'], [2, 3, 4, 5, 10], 'meter', 'meters' );\n  uc.addGroup( 1000,  'm',    ['km', 'kilometer', 'kilometers'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'kilometer', 'kilometers' );\n\n  uc.addBaseConversion('in', 'mm', 25.4);\n\n  return uc;\n\n})());\n\n\nUnitz.addClass((function generateTimeClass()\n{\n  var uc = new UnitzClass( 'Time' );\n\n  uc.addGroup( 1,         null,     ['ns', 'nanosecond', 'nanoseconds', 'nano', 'nanos'], [10, 100], 'nanosecond', 'nanoseconds' );\n  uc.addGroup( 1000,      'ns',     ['us', 'microsecond', 'microseconds', 'micros', 'micro'], [10, 100, 1000], 'microsecond', 'microseconds' );\n  uc.addGroup( 1000,      'us',     ['ms', 'millisecond', 'milliseconds', 'millis'], [10, 100, 1000], 'millisecond', 'milliseconds' );\n  uc.addGroup( 1000,      'ms',     ['s', 'second', 'seconds', 'sec', 'secs'], [2, 10, 100, 1000], 'second', 'seconds' );\n  uc.addGroup( 60,        's',      ['min', 'minute', 'minutes', 'mins'], [2, 3, 4, 60], 'minute', 'minutes' );\n  uc.addGroup( 60,        'min',    ['hr', 'hour', 'hours', 'hrs'], [2, 3, 4, 60], 'hour', 'hours' );\n  uc.addGroup( 24,        'hr',     ['day', 'days'], [2, 3, 4, 6, 24], 'day', 'days' );\n  uc.addGroup( 7,         'day',    ['wk', 'week', 'weeks', 'wks'], [7], 'week', 'weeks' );\n  uc.addGroup( 365.2425,  'day',    ['yr', 'year', 'years', 'yrs'], [2, 3, 4, 6, 12, 52], 'year', 'years' );\n\n  return uc;\n\n})());\n\n\nUnitz.addClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Volume' );\n\n  uc.addGroup( 1,     null,   ['tsp', 'ts', 'tsps', 'teaspoon', 'teaspoons'], [2, 3, 4], 'teaspoon', 'teaspoons' );\n  uc.addGroup( 3,     'tsp',  ['tbsp', 'tbsps', 'tablespoon', 'tablespoons'], [2, 3, 4], 'tablespoon', 'tablespoons' );\n  uc.addGroup( 6,     'tsp',  ['oz', 'ounce', 'ounces', 'fl-oz', 'fl oz', 'floz', 'fluid ounce', 'fl. oz.', 'oz. fl.', 'oz fl'], [2, 3, 6], 'fluid ounce', 'fluid ounces' );\n  uc.addGroup( 8,     'oz',   ['c', 'cup', 'cups'], [2, 3, 4], 'cup', 'cups' );\n  uc.addGroup( 2,     'c',    ['pt', 'pint', 'pints'], [2, 4], 'pint', 'pints' );\n  uc.addGroup( 4,     'c',    ['qt', 'quart', 'quarts'], [2, 4], 'quart', 'quarts' );\n  uc.addGroup( 4,     'qt',   ['gal', 'gallon', 'gallons'], [2, 4, 8, 16], 'gallon', 'gallons' );\n\n  uc.addGroup( 1,     null,   ['ml', 'millilitre', 'millilitres'], [2, 10], 'millilitre', 'millilitres' );\n  uc.addGroup( 1000,  'ml',   ['l', 'litre', 'litres'], [2, 10], 'litre', 'litres' );\n\n  uc.addGroup( 1,     null,   ['mm3', 'mm^3', 'cubic mm', 'cubic millimeter', 'cubic millimeters'], [2, 4, 8], 'cubic millimeter', 'cubic millimeters' );\n  uc.addGroup( 100,   'mm3',  ['cm3', 'cm^3', 'cubiccmm', 'cubic centimeter', 'cubic centimeters'], [2, 4, 8], 'cubic centimeter', 'cubic centimeters' );\n  uc.addGroup( 10000, 'cm3',  ['m3', 'm^3', 'cubic m', 'cubic meter', 'cubic meters'], [2, 4, 8], 'cubic meter', 'cubic meters' );\n  uc.addGroup( 1000000, 'm3', ['km3', 'km^3', 'cubic km', 'meter', 'meters'], [2, 4, 8], 'meter', 'meters' );\n\n  uc.addGroup( 1,     null,   ['in3', 'in^3', 'cubic in', 'cubic inch', 'cubic inches'], [2, 4, 8], 'cubic inch', 'cubic inches' );\n  uc.addGroup( 144,   'in3',  ['ft3', 'ft^3', 'cubic ft', 'cubic foot', 'cubic feet'], [2, 4, 8], 'cubic foot', 'cubic feet' );\n  uc.addGroup( 27,    'ft3',  ['yd3', 'yd^3', 'cubic yd', 'cubic yard', 'cubic yards'], [2, 4, 8], 'cubic yard', 'cubic yards' );\n\n  uc.addBaseConversion( 'tsp', 'ml', 4.92892 );\n  uc.addBaseConversion( 'ml', 'mm3', 1 );\n  uc.addBaseConversion( 'tsp', 'in3', 0.300781 );\n\n  return uc;\n\n})());\n\n\nUnitz.addClass((function generateWeightClass()\n{\n  var uc = new UnitzClass( 'Weight' );\n\n  uc.addGroup( 1,       null,     ['mg', 'milligram', 'milligrams'], [2, 10], 'milligram', 'milligrams' );\n  uc.addGroup( 1000,    'mg',     ['g', 'gram', 'grams'], [2, 10, 100], 'gram', 'grams' );\n  uc.addGroup( 1000,    'g',      ['kg', 'kilogram', 'kilograms', 'kilo', 'kilos'], [2, 10, 100], 'kilogram', 'kilograms' );\n\n  uc.addGroup( 1,       null,     ['oz', 'ounce', 'ounces'], [2, 3, 4, 10], 'ounce', 'ounces' );\n  uc.addGroup( 16,      'oz',     ['lb', 'lbs', 'pound', 'pounds'], [2, 3, 4, 16], 'pound', 'pounds' );\n  uc.addGroup( 2000,    'lb',     ['ton', 'tons', 'tonnes'], [2, 3, 4, 10], 'ton', 'tons' );\n\n  uc.addBaseConversion( 'mg', 'oz', 0.000035274 );\n\n  return uc;\n\n})());\n\n\n  global.Unitz = Unitz;\n\n})( this );\n"],"sourceRoot":"/source/"}