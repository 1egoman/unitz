{"version":3,"sources":["unitz.min.js"],"names":["root","factory","define","amd","module","exports","Unitz","this","isString","x","isObject","isNumber","isNaN","isArray","Array","isOne","Math","abs","epsilon","isWhole","floor","isHeuristicMatch","unitA","unitB","substring","heuristicLength","createNormal","value","unit","splitInput","input","split","separator","parseInput","parse","UnitzParsed","fromNumber","group","regex","exec","whole","numer","denom","decimal","toLowerCase","parseInt","sign","parseFloat","units","best","fraction","largestDenominator","parsed","unitClass","closest","closestGroup","groups","i","length","grp","convert","valid","distance","denominator","actual","normal","addUnit","string","converters","groupMap","baseFrom","bases","baseTo","mapping","findUnit","singular","chosen","u","combine","inputA","inputB","splitA","splitB","splitBoth","concat","parsedInput","push","a","k","b","converted","splice","combined","parsedBest","join","separatorJoin","subtract","allowNegatives","conversions","min","max","UnitzFraction","denominators","UnitzConversion","addClass","classMap","className","classes","UnitzClass","UnitzGroup","mainUnit","baseUnit","baseScale","plural","numerator","den","num","round","dis","ceil","remainder","shortUnit","longUnit","friendly","shortNormal","longNormal","prototype","addGroup","relativeValue","relativeTo","addOneBaseConversion","source","target","addBaseConversion","to","withUnit","classlessDenominators","number","uc","Class","Group","Parsed","Fraction"],"mappings":"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","file":"unitz.min.js","sourcesContent":["/* unitz 0.3.0 - A unit parser, converter, & combiner in JS by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define([], factory);  // jshint ignore:line\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Unitz = factory();\n  }\n}(this, function()\n{\n\n  var classes = [];\n  var classMap = {};\n  var units = {};\n\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isOne(x)\n{\n  return isNumber( x ) && Math.abs( Math.abs( x ) - 1 ) < Unitz.epsilon;\n}\n\nfunction isWhole(x)\n{\n  return isNumber( x ) && Math.abs( Math.floor( x ) - x ) < 0.00000001;\n}\n\nfunction isHeuristicMatch(unitA, unitB)\n{\n  return unitA.substring( 0, Unitz.heuristicLength ) === unitB.substring( 0, Unitz.heuristicLength );\n}\n\nfunction createNormal(value, unit)\n{\n  return unit ? value + ' ' + unit : value;\n}\n\nfunction splitInput(input)\n{\n  if ( isString( input ) )\n  {\n    return input.split( Unitz.separator );\n  }\n  if ( isArray( input ) )\n  {\n    return input;\n  }\n  if ( isObject( input ) )\n  {\n    return [ input ];\n  }\n\n  return [];\n}\n\nfunction parseInput(input)\n{\n  if ( isString( input ) )\n  {\n    return parse( input );\n  }\n  if ( isObject( input ) )\n  {\n    return input;\n  }\n  if ( isNumber( input ) )\n  {\n    return UnitzParsed.fromNumber( input );\n  }\n\n  return false;\n}\n\nfunction parse(input)\n{\n  var group = Unitz.regex.exec( input );\n  var whole = group[1];\n  var numer = group[3];\n  var denom = group[5];\n  var decimal = group[6];\n  var unit = group[7].toLowerCase();\n\n  if ( !whole && !decimal && !unit )\n  {\n    return false;\n  }\n\n  var value = 1;\n\n  if ( whole )\n  {\n    value = parseInt( whole );\n\n    var sign = (value < 0 ? -1 : 1);\n\n    if ( denom )\n    {\n      denom = parseInt( denom );\n\n      if ( numer )\n      {\n        value += ( parseInt( numer ) / denom ) * sign;\n      }\n      else\n      {\n        value /= denom;\n      }\n    }\n    else if ( decimal )\n    {\n      value += parseFloat( '0.' + decimal ) * sign;\n    }\n  }\n\n  return new UnitzParsed( value, unit, units[ unit ], input );\n}\n\nfunction best(input, fraction, largestDenominator)\n{\n  var parsed = parseInput( input );\n\n  if ( parsed.unitClass )\n  {\n    // out of all groups in class, calculate converted value fraction and\n    // take the one that is a whole number or is the closest to a whole\n    // number while being the closest\n    var closest = null;\n    var closestGroup = null;\n    var groups = parsed.unitClass.groups;\n\n    for (var i = 0; i < groups.length; i++)\n    {\n      var grp = groups[ i ];\n      var fraction = parsed.convert( grp.unit, true );\n\n      if ( fraction.valid && (!closest || (fraction.distance < closest.distance) || fraction.denominator === 1) )\n      {\n        closest = fraction;\n        closestGroup = grp;\n      }\n    }\n\n    if ( closest )\n    {\n      parsed.value = closest.actual;\n      parsed.unit = closestGroup.unit;\n      parsed.group = closestGroup;\n      parsed.normal = closestGroup.addUnit( closest ? closest.string : closest.actual );\n    }\n  }\n\n  return parsed;\n}\n\nfunction convert(input, unit, fraction)\n{\n  var parsed = parseInput( input );\n\n  // Not valid input? return false\n  if ( !isObject( parsed ) )\n  {\n    return false;\n  }\n\n  var value = parsed.value;\n  var unitClass = parsed.unitClass;\n\n  // If there was no unit class and no unit provided, return the unitless value.\n  if ( !unitClass && !unit )\n  {\n    return value;\n  }\n\n  // If there was no unit class parsed OR the given unit is not in the same class then return false!\n  if ( !unitClass || !(unit in unitClass.converters) )\n  {\n    return false;\n  }\n\n  // If the parsed unit and requested unit is the same, return the parsed value.\n  if ( unitClass.groupMap[ unit ] === unitClass.groupMap[ parsed.unit ] )\n  {\n    return value;\n  }\n\n  // Convert the parsed value to its base unit\n  value *= unitClass.converters[ parsed.unit ];\n\n  // If they don't have the same bases convert the parsed value\n  var baseFrom = unitClass.bases[ parsed.unit ];\n  var baseTo = unitClass.bases[ unit ];\n\n  if ( baseFrom !== baseTo )\n  {\n    value *= unitClass.mapping[ baseFrom ][ baseTo ];\n  }\n\n  // Divide the value by the desired unit.\n  value /= unitClass.converters[ unit ];\n\n  return value;\n}\n\nfunction findUnit(units, singular)\n{\n  var chosen = '';\n\n  for (var i = 0; i < units.length; i++)\n  {\n    var u = units[ i ];\n\n    if ( u.length && (chosen === '' || (singular && u.length < chosen.length) || (!singular && u.length > chosen.length) ) )\n    {\n      chosen = u;\n    }\n  }\n\n  return chosen;\n}\n\nfunction combine(inputA, inputB, fraction, largestDenominator)\n{\n  var splitA = splitInput( inputA );\n  var splitB = splitInput( inputB );\n  var splitBoth = splitA.concat( splitB );\n  var parsed = [];\n\n  // Parse all inputs - ignore invalid inputs\n  for (var i = 0; i < splitBoth.length; i++)\n  {\n    var parsedInput = parseInput( splitBoth[ i ] );\n\n    if ( parsedInput !== false )\n    {\n      parsedInput.units = [];\n      parsedInput.units.push( parsedInput.unit );\n      parsed.push( parsedInput );\n    }\n  }\n\n  // Try merging subsequent (k) parsed values into this one (i)\n  for (var i = 0; i < parsed.length - 1; i++)\n  {\n    var a = parsed[ i ];\n\n    for (var k = parsed.length - 1; k > i; k--)\n    {\n      var b = parsed[ k ];\n      var converted = b.convert( a.unit );\n\n      // Same unit class. We can use proper singular/plural units.\n      if ( converted !== false && a.group )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += converted;\n      }\n      // \"a\" or \"b\" doesn't have a unit\n      else if ( !a.unit || !b.unit )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value;\n        a.units = a.units.concat( b.units );\n      }\n      // \"a\" and \"b\" have a similar enough unit.\n      else if ( isHeuristicMatch( a.unit, b.unit ) )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value;\n        a.units = a.units.concat( b.units );\n      }\n    }\n  }\n\n  var combined = [];\n\n  for (var i = 0; i < parsed.length; i++)\n  {\n    var a = parsed[ i ];\n\n    if ( a.group )\n    {\n      a.normal = a.group.addUnit( a.value );\n    }\n    else\n    {\n      a.unit = findUnit( a.units, isOne( a.value ) );\n      a.normal = createNormal( a.value, a.unit );\n    }\n\n    var parsedBest = best( a, fraction, largestDenominator );\n\n    if ( parsedBest && parsedBest.normal )\n    {\n      combined.push( parsedBest.normal );\n    }\n  }\n\n  return combined.join( Unitz.separatorJoin );\n}\n\nfunction subtract(inputA, inputB, allowNegatives, fraction, largestDenominator)\n{\n  var splitA = splitInput( inputA );\n  var splitB = splitInput( inputB );\n  var splitBoth = splitA.concat( splitB );\n  var parsed = [];\n\n  // Parse all inputs - ignore invalid inputs\n  for (var i = 0; i < splitBoth.length; i++)\n  {\n    var parsedInput = parseInput( splitBoth[ i ] );\n\n    if ( parsedInput !== false )\n    {\n      parsedInput.sign = i >= splitA.length ? -1 : 1;\n      parsedInput.units = [];\n      parsedInput.units.push( parsedInput.unit );\n      parsed.push( parsedInput );\n    }\n  }\n\n  // Try merging subsequent (k) parsed values into this one (i)\n  for (var i = 0; i < parsed.length - 1; i++)\n  {\n    var a = parsed[ i ];\n\n    for (var k = parsed.length - 1; k > i; k--)\n    {\n      var b = parsed[ k ];\n      var converted = b.convert( a.unit );\n      var sign = b.sign * a.sign;\n\n      // Same unit class. We can use proper singular/plural units.\n      if ( converted !== false && a.group )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += converted * sign;\n      }\n      // \"a\" or \"b\" doesn't have a unit\n      else if ( !a.unit || !b.unit )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value * sign;\n        a.units = a.units.concat( b.units );\n      }\n      // \"a\" and \"b\" have a similar enough unit.\n      else if ( isHeuristicMatch( a.unit, b.unit ) )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value * sign;\n        a.units = a.units.concat( b.units );\n      }\n    }\n  }\n\n  var combined = [];\n\n  for (var i = 0; i < parsed.length; i++)\n  {\n    var a = parsed[ i ];\n\n    if ( a.value < 0 && !allowNegatives )\n    {\n      continue;\n    }\n\n    if ( a.group )\n    {\n      a.normal = a.group.addUnit( a.value );\n    }\n    else\n    {\n      a.unit = findUnit( a.units, isOne( a.value ) );\n      a.normal = createNormal( a.value, a.unit );\n    }\n\n    var parsedBest = best( a, fraction, largestDenominator );\n\n    if ( parsedBest && parsedBest.normal )\n    {\n      combined.push( parsedBest.normal );\n    }\n  }\n\n  return combined.join( Unitz.separatorJoin );\n}\n\nfunction conversions(input, largestDenominator, min, max)\n{\n  var parsed = parseInput( input );\n\n  if ( !isObject( parsed ) || !parsed.unitClass )\n  {\n    return input;\n  }\n\n  var groups = parsed.unitClass.groups;\n  var conversions = parsed.conversions = [];\n\n  for (var i = 0; i < groups.length; i++)\n  {\n    var grp = groups[ i ];\n    var converted = parsed.convert( grp.unit );\n\n    if ( !isNumber( converted ) )\n    {\n      continue;\n    }\n\n    var fraction = new UnitzFraction( converted, grp.denominators, largestDenominator );\n\n    if ( isNumber( min ) && converted < min )\n    {\n      continue;\n    }\n\n    if ( isNumber( max ) && converted > max )\n    {\n      continue;\n    }\n\n    conversions.push(new UnitzConversion( converted, fraction, grp ));\n  }\n\n  return parsed;\n}\n\nfunction addClass(unitClass)\n{\n  classMap[ unitClass.className ] = unitClass;\n  classes.push( unitClass );\n\n  for (var unit in unitClass.converters)\n  {\n    units[ unit ] = unitClass;\n  }\n}\n\n\nfunction UnitzClass(className)\n{\n  this.className = className;\n  this.converters = {};\n  this.mapping = {};\n  this.bases = {};\n  this.groups = [];\n  this.groupMap = {};\n}\n\nUnitzClass.prototype =\n{\n\n  addGroup: function(relativeValue, relativeTo, units, denominators, singular, plural)\n  {\n    var mainUnit = units[ 0 ];\n    var baseUnit = mainUnit;\n\n    if ( relativeTo )\n    {\n      relativeValue *= this.converters[ relativeTo ];\n\n      baseUnit = this.bases[ relativeTo ];\n    }\n\n    var group = new UnitzGroup( mainUnit, baseUnit, relativeValue, units, singular, plural, denominators );\n\n    for (var i = 0; i < units.length; i++)\n    {\n      var unit = units[ i ];\n\n      this.converters[ unit ] = relativeValue;\n      this.bases[ unit ] = baseUnit;\n      this.groupMap[ unit ] = group;\n    }\n\n    this.groups.push( group );\n  },\n\n  addOneBaseConversion: function(source, target, value)\n  {\n    if ( !(source in this.mapping) )\n    {\n      this.mapping[ source ] = {};\n    }\n\n    this.mapping[ source ][ target ] = value;\n  },\n\n  addBaseConversion: function(source, target, value)\n  {\n    this.addOneBaseConversion( source, target, value );\n    this.addOneBaseConversion( target, source, 1.0 / value );\n  }\n\n};\n\n\nfunction UnitzGroup(mainUnit, baseUnit, baseScale, units, singular, plural, denominators)\n{\n  this.unit = mainUnit;\n  this.baseUnit = baseUnit;\n  this.baseScale = baseScale;\n  this.units = units;\n  this.singular = singular;\n  this.plural = plural;\n  this.denominators = denominators;\n}\n\nUnitzGroup.prototype =\n{\n  addUnit: function(x)\n  {\n    return createNormal( x, isOne( x ) ? this.singular : this.plural );\n  }\n};\n\n\nfunction UnitzParsed(value, unit, unitClass, normal)\n{\n  this.value = value;\n  this.unit = unit;\n  this.unitClass = unitClass;\n  this.group = unitClass ? unitClass.groupMap[ unit ] : null;\n  this.normal = this.group ? this.group.addUnit( value ) : normal;\n}\n\nUnitzParsed.prototype =\n{\n  convert: function(to, fraction, withUnit, largestDenominator, classlessDenominators)\n  {\n    var converted = convert( this, to );\n\n    if ( converted !== false && fraction )\n    {\n      var denominators = this.group ? this.group.denominators : classlessDenominators;\n\n      if ( isArray( denominators ) )\n      {\n        converted = new UnitzFraction( converted, denominators, largestDenominator );\n\n        if ( isObject( converted ) && withUnit && to )\n        {\n          converted.string = converted.string + ' ' + to;\n        }\n      }\n    }\n\n    if ( withUnit && isNumber( converted ) && to )\n    {\n      converted = converted + ' ' + to;\n    }\n\n    return converted;\n  },\n\n  best: function(fraction, largestDenominator)\n  {\n    return best( this, fraction, largestDenominator );\n  }\n};\n\nUnitzParsed.fromNumber = function(number)\n{\n  return new UnitzParsed(number, '', null, number, null);\n};\n\nfunction UnitzFraction(value, denominators, largestDenominator)\n{\n  var distance = Math.abs( Math.floor( value ) - value );\n  var denominator = 1;\n  var numerator = value;\n\n  for (var i = 0; i < denominators.length && distance > Unitz.epsilon; i++)\n  {\n    var den = denominators[ i ];\n    var num = Math.round( value * den );\n    var dis = Math.abs( num / den - value );\n\n    if ( isNumber( largestDenominator ) && den > largestDenominator )\n    {\n      break;\n    }\n\n    if ( dis + Unitz.epsilon < distance )\n    {\n      denominator = den;\n      numerator = num;\n      distance = dis;\n    }\n  }\n\n  this.numerator = numerator;\n  this.denominator = denominator;\n  this.actual = numerator / denominator;\n  this.distance = distance;\n  this.whole = this.actual < 0 ? Math.ceil( this.actual) : Math.floor( this.actual );\n  this.remainder = Math.abs( Math.round( (value - this.whole) * denominator ) );\n  this.valid = denominator !== 1 || isWhole( numerator );\n  this.string = '';\n\n  if ( denominator === 1 )\n  {\n    this.string = numerator;\n  }\n  else if ( this.whole === 0 )\n  {\n    this.string = numerator + '/' + denominator;\n  }\n  else\n  {\n    this.string = this.whole + ' ' + this.remainder + '/' + denominator;\n  }\n}\n\n\nfunction UnitzConversion(converted, fraction, group)\n{\n  this.decimal = converted;\n  this.fraction = fraction;\n  this.shortUnit = group.unit;\n  this.longUnit = isOne( converted ) ? group.singular : group.plural;\n  this.group = group;\n  this.friendly = fraction.valid ? fraction.string : converted;\n  this.shortNormal = createNormal( this.friendly, this.shortUnit );\n  this.longNormal = createNormal( this.friendly, this.longUnit );\n}\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Area' );\n\n  uc.addGroup( 1,     null,    ['sqin', 'sq. in.', 'sq in', 'in2', 'in^2', 'square inch', 'square inches'], [2, 4, 8, 16], 'square inch', 'square inches' );\n  uc.addGroup( 144,   'sqin',  ['sqft', 'sq. ft.', 'sq ft', 'ft2', 'ft^2', 'square foot', 'square feet'], [2, 4, 8, 16], 'square foot', 'square feet' );\n  uc.addGroup( 9,     'sqft',  ['sqyd', 'sq. yd.', 'sq yd', 'yd2', 'yd^2', 'square yard', 'square yards'], [2, 3, 4, 8, 9, 16], 'square yard', 'square yards' );\n  uc.addGroup( 4840,  'sqyd',  ['acre', 'acres'], [2, 3, 4, 8, 10], 'acre', 'acres' );\n  uc.addGroup( 640,   'acre',  ['sqmi', 'sq. mi.', 'sq mi', 'mi2', 'mi^2', 'square mile', 'square miles'], [2, 3, 4, 8, 10], 'square mile', 'square miles' );\n\n  uc.addGroup( 1,     null,    ['sqmm', 'sq. mm.', 'sq mm', 'mm2', 'mm^2', 'square millimeter', 'square millimeters'], [2, 4, 8, 16], 'square millimeter', 'square millimeters' );\n  uc.addGroup( 100,   'sqmm',  ['sqcm', 'sq. cm.', 'sq cm', 'cm2', 'cm^2', 'square centimeter', 'square centimeters'], [2, 4, 8, 16], 'square centimeter', 'square centimeters' );\n  uc.addGroup( 10000, 'sqcm',  ['sqm', 'sq. m.', 'sq m', 'm2', 'm^2', 'square meter', 'square meters'], [2, 4, 8, 16], 'square meter', 'square meters' );\n  uc.addGroup( 1000000, 'sqm', ['sqkm', 'sq. km.', 'sq km', 'km2', 'km^2', 'square kilometer', 'square kilometers'], [2, 3, 4, 8, 9, 16], 'square kilometer', 'square kilometers' );\n\n  uc.addBaseConversion( 'sqin', 'sqmm', 645.16 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Digital' );\n\n  uc.addGroup( 1,     null,   ['bit', 'bits'], [], 'bit', 'bits' );\n  uc.addGroup( 4,     'bit',   ['nibble', 'nibbles'], [], 'nibble', 'nibbles' );\n  uc.addGroup( 8,     'bit',   ['b', 'byte', 'bytes'], [2, 8], 'byte', 'bytes' );\n  uc.addGroup( 1024,  'b',     ['kb', 'kilobyte', 'kilobytes'], [2, 4, 8, 16], 'kilobyte', 'kilobytes' );\n  uc.addGroup( 1024,  'kb',    ['mb', 'megabyte', 'megabytes'], [2, 4, 8, 16], 'megabyte', 'megabytes' );\n  uc.addGroup( 1024,  'mb',    ['gb', 'gigabyte', 'gigabytes'], [2, 4, 8, 16], 'gigabyte', 'gigabytes' );\n  uc.addGroup( 1024,  'gb',    ['tb', 'terabyte', 'terabytes'], [2, 4, 8, 16], 'terabyte', 'terabytes' );\n  uc.addGroup( 1024,  'tb',    ['pb', 'petabyte', 'petabytes'], [2, 4, 8, 16], 'petabyte', 'petabytes' );\n  uc.addGroup( 1024,  'pb',    ['eb', 'exabyte', 'exabytes'], [2, 4, 8, 16], 'exabyte', 'exabytes' );\n  uc.addGroup( 1024,  'bit',   ['kbit', 'kilobit', 'kilobits'], [2, 4, 8, 16], 'kilobit', 'kilobits' );\n  uc.addGroup( 1024,  'kbit',  ['mbit', 'megabit', 'megabits'], [2, 4, 8, 16], 'megabit', 'megabits' );\n  uc.addGroup( 1024,  'mbit',  ['gbit', 'gigabit', 'gigabits'], [2, 4, 8, 16], 'gigabit', 'gigabits' );\n  uc.addGroup( 1024,  'gbit',  ['tbit', 'terabit', 'terabits'], [2, 4, 8, 16], 'terabit', 'terabits' );\n  uc.addGroup( 1024,  'tbit',  ['pbit', 'petabit', 'petabits'], [2, 4, 8, 16], 'petabit', 'petabits' );\n  uc.addGroup( 1024,  'pbit',  ['ebit', 'exabit', 'exabits'], [2, 4, 8, 16], 'exabit', 'exabits' );\n\n  return uc;\n\n})());\n\n\naddClass((function generateLengthClass()\n{\n  var uc = new UnitzClass( 'Length' );\n\n  uc.addGroup( 1,     null,   ['in', 'inch', 'inches', '\"'], [2, 3, 4, 8, 16, 32], 'inch', 'inches' );\n  uc.addGroup( 12,    'in',   ['ft', 'foot', 'feet', \"'\"], [2, 3, 4, 12], 'foot', 'feet' );\n  uc.addGroup( 3,     'ft',   ['yd', 'yds', 'yard', 'yards'], [3], 'yard', 'yards' );\n  uc.addGroup( 5280,  'ft',   ['mi', 'mile', 'miles'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'mile', 'miles' );\n  uc.addGroup( 3,     'mi',   ['league', 'leagues'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'league', 'leagues' );\n\n  uc.addGroup( 1,     null,   ['mm', 'millimeter', 'millimeters'], [10], 'millimeter', 'millimeters' );\n  uc.addGroup( 10,    'mm',   ['cm', 'centimeter', 'centimeters'], [2, 4, 10], 'centimeter', 'centimeters' );\n  uc.addGroup( 10,    'cm',   ['dc', 'decimeter', 'decimeters'], [10], 'decimeter', 'decimeters' );\n  uc.addGroup( 100,   'cm',   ['m', 'meter', 'meters'], [2, 3, 4, 5, 10], 'meter', 'meters' );\n  uc.addGroup( 1000,  'm',    ['km', 'kilometer', 'kilometers'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'kilometer', 'kilometers' );\n\n  uc.addBaseConversion('in', 'mm', 25.4);\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Rotation' );\n\n  uc.addGroup( 1,     null,    ['deg', 'degs', 'degree', 'degrees'], [], 'degree', 'degrees' );\n  uc.addGroup( 1,     null,    ['rad', 'rads', 'radian', 'radians'], [], 'radian', 'radians' );\n\n  uc.addBaseConversion( 'deg', 'rad', 0.0174533 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateTimeClass()\n{\n  var uc = new UnitzClass( 'Time' );\n\n  uc.addGroup( 1,         null,     ['ns', 'nanosecond', 'nanoseconds', 'nano', 'nanos'], [10, 100], 'nanosecond', 'nanoseconds' );\n  uc.addGroup( 1000,      'ns',     ['us', 'microsecond', 'microseconds', 'micros', 'micro'], [10, 100, 1000], 'microsecond', 'microseconds' );\n  uc.addGroup( 1000,      'us',     ['ms', 'millisecond', 'milliseconds', 'millis'], [10, 100, 1000], 'millisecond', 'milliseconds' );\n  uc.addGroup( 1000,      'ms',     ['s', 'second', 'seconds', 'sec', 'secs'], [2, 10, 100, 1000], 'second', 'seconds' );\n  uc.addGroup( 60,        's',      ['min', 'minute', 'minutes', 'mins'], [2, 3, 4, 60], 'minute', 'minutes' );\n  uc.addGroup( 60,        'min',    ['hr', 'hour', 'hours', 'hrs'], [2, 3, 4, 60], 'hour', 'hours' );\n  uc.addGroup( 24,        'hr',     ['day', 'days'], [2, 3, 4, 6, 24], 'day', 'days' );\n  uc.addGroup( 7,         'day',    ['wk', 'week', 'weeks', 'wks'], [7], 'week', 'weeks' );\n  uc.addGroup( 365.2425,  'day',    ['yr', 'year', 'years', 'yrs'], [2, 3, 4, 6, 12, 52], 'year', 'years' );\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Volume' );\n\n  uc.addGroup( 1,     null,   ['tsp', 'ts', 'tsps', 'teaspoon', 'teaspoons'], [2, 3, 4], 'teaspoon', 'teaspoons' );\n  uc.addGroup( 3,     'tsp',  ['tbsp', 'tbsps', 'tablespoon', 'tablespoons'], [2, 3, 4], 'tablespoon', 'tablespoons' );\n  uc.addGroup( 6,     'tsp',  ['oz', 'ounce', 'ounces', 'fl-oz', 'fl oz', 'floz', 'fluid ounce', 'fl. oz.', 'oz. fl.', 'oz fl'], [2, 3, 6], 'fluid ounce', 'fluid ounces' );\n  uc.addGroup( 8,     'oz',   ['c', 'cup', 'cups'], [2, 3, 4], 'cup', 'cups' );\n  uc.addGroup( 2,     'c',    ['pt', 'pint', 'pints'], [2, 4, 8], 'pint', 'pints' );\n  uc.addGroup( 4,     'c',    ['qt', 'quart', 'quarts'], [2, 4, 8], 'quart', 'quarts' );\n  uc.addGroup( 4,     'qt',   ['gal', 'gallon', 'gallons'], [2, 4, 8, 16], 'gallon', 'gallons' );\n\n  uc.addGroup( 1,     null,   ['ml', 'millilitre', 'millilitres'], [2, 10], 'millilitre', 'millilitres' );\n  uc.addGroup( 1000,  'ml',   ['l', 'litre', 'litres'], [2, 10], 'litre', 'litres' );\n\n  uc.addGroup( 1,     null,   ['mm3', 'mm^3', 'cubic mm', 'cubic millimeter', 'cubic millimeters'], [2, 4, 8], 'cubic millimeter', 'cubic millimeters' );\n  uc.addGroup( 1000,  'mm3',  ['cm3', 'cm^3', 'cubiccmm', 'cubic centimeter', 'cubic centimeters'], [2, 4, 8], 'cubic centimeter', 'cubic centimeters' );\n  uc.addGroup( 1000000, 'cm3', ['m3', 'm^3', 'cubic m', 'cubic meter', 'cubic meters'], [2, 4, 8], 'cubic meter', 'cubic meters' );\n  uc.addGroup( 1000000000, 'm3', ['km3', 'km^3', 'cubic km', 'meter', 'meters'], [2, 4, 8], 'meter', 'meters' );\n\n  uc.addGroup( 1,     null,   ['in3', 'in^3', 'cubic in', 'cubic inch', 'cubic inches'], [2, 4, 8], 'cubic inch', 'cubic inches' );\n  uc.addGroup( 1728,  'in3',  ['ft3', 'ft^3', 'cubic ft', 'cubic foot', 'cubic feet'], [2, 4, 8], 'cubic foot', 'cubic feet' );\n  uc.addGroup( 27,    'ft3',  ['yd3', 'yd^3', 'cubic yd', 'cubic yard', 'cubic yards'], [2, 4, 8], 'cubic yard', 'cubic yards' );\n\n  uc.addBaseConversion( 'tsp', 'ml', 4.92892 );\n  uc.addBaseConversion( 'ml', 'mm3', 1 );\n  uc.addBaseConversion( 'tsp', 'in3', 0.300781 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateWeightClass()\n{\n  var uc = new UnitzClass( 'Weight' );\n\n  uc.addGroup( 1,       null,     ['mg', 'milligram', 'milligrams'], [2, 10], 'milligram', 'milligrams' );\n  uc.addGroup( 1000,    'mg',     ['g', 'gram', 'grams'], [2, 10, 100], 'gram', 'grams' );\n  uc.addGroup( 1000,    'g',      ['kg', 'kilogram', 'kilograms', 'kilo', 'kilos'], [2, 10, 100], 'kilogram', 'kilograms' );\n\n  uc.addGroup( 1,       null,     ['oz', 'ounce', 'ounces'], [2, 3, 4, 16], 'ounce', 'ounces' );\n  uc.addGroup( 16,      'oz',     ['lb', 'lbs', 'pound', 'pounds'], [2, 3, 4, 16], 'pound', 'pounds' );\n  uc.addGroup( 2000,    'lb',     ['ton', 'tons', 'tonnes'], [2, 3, 4, 10], 'ton', 'tons' );\n\n  uc.addBaseConversion( 'mg', 'oz', 0.000035274 );\n\n  return uc;\n\n})());\n\n\n  var Unitz = {};\n\n  Unitz.classes = classes;\n  Unitz.classMap = classMap;\n  Unitz.units = units;\n  Unitz.regex = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\/(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n  Unitz.epsilon = 0.001;\n  Unitz.separator = ',';\n  Unitz.separatorJoin = ', ';\n  Unitz.heuristicLength = 3;\n\n  Unitz.parse = parse;\n  Unitz.parseInput = parseInput;\n  Unitz.convert = convert;\n  Unitz.best = best;\n  Unitz.splitInput = splitInput;\n  Unitz.combine = combine;\n  Unitz.subtract = subtract;\n  Unitz.isHeuristicMatch = isHeuristicMatch;\n  Unitz.conversions = conversions;\n  Unitz.isOne = isOne;\n  Unitz.isWhole = isWhole;\n  Unitz.findUnit = findUnit;\n  Unitz.addClass = addClass;\n\n  Unitz.Class = UnitzClass;\n  Unitz.Group = UnitzGroup;\n  Unitz.Parsed = UnitzParsed;\n  Unitz.Fraction = UnitzFraction;\n\n  return Unitz;\n\n}));\n"],"sourceRoot":"/source/"}